As classes genéricas encapsulam operações que não são específicas de um determinado tipo de dados.



List<tipo> lista = new List<tipo>();




ELE SUBSTITUI O TIPO QUE PASSAR.



Antes:

public class MeuArray
    {
        private int[] array = new int[10];
    }


Depois:


public class MeuArray<T>
    {
        private T[] array = new T[10];
    }




T = type.







public class MeuArray<T>
    {
        private static int capacidade = 10;
        private int contador = 0;
        private T[] array = new T[10];


        public void AdicionarElementoArray(T elemento)
        {
            if (contador + 1 < 11)
            {
                array[contador] = elemento;
            }
            contador++;
        }

        public T this[int index]
        {
            get { return array[index]; }
            set { array[index] = value; }
        }
    }
}





MeuArray<int> arrayInteiro = new MeuArray<int>();


arrayInteiro.AdicionarElementoArray(30);

Console.WriteLine(arrayInteiro[0]);




MeuArray<string> arrayString = new MeuArray<string>();


arrayString.AdicionarElementoArray("Teste");

Console.WriteLine(arrayString[0]);





Trabalhando com Array, que trabalhe da mesma forma, da pra usar esses Array da mesma classe, seguindo a ideologia de Orientação a Objetos, nunca repetir o código.


